/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Assignment3;

import java.io.*;
import java.util.*;
/**
 *
 * @author michaelmayaguari
 */
public class MorseCodeConvert {

    /*
	 * an ArrayList of type MorseCode. It holds all valid conversion characters and
	 * their corresponding codes.
     */
    private ArrayList<MorseCode> listCode = new ArrayList<>();

    /*
	 * Accepts a file name as parameter. 
	 * The constructor attempts to open the file,if it fails, an exception is thrown 
	   with the message Invalid file name:<<file name>>. 
	 * The input file contains the conversion between characters and Morse code; 
	   DO NOT EDIT THIS FILE. Read all lines in the file; add the valid
	   entries by creating an instance of type MorseCode for each conversion
	   character and add it to listCode. 
	 * Each line in the input file consists of two columns separated by a tab (i.e. \t). 
	   Some lines in the file are corrupt, make sure you skip empty lines and lines that 
	   do not have exactly two entries. Your program should NOT halt on input errors. 
	 * For each exception encountered from MorseCode, print the exception. Your program 
	   should NOT halt on input errors. 
	 * For each skipped line print the message Skipping line: <<the skipped line>>
     */
    public MorseCodeConvert(String fileName) throws Exception {

        try {

            Scanner scanner = new Scanner(new File(fileName));

            while (scanner.hasNext()) {

                String line = scanner.nextLine();
                
                // splits the line when \t (tab) is found
                String[] details = line.split("\t");

                // checks whether there are two entries in the line, if not, line is skipped
                if (details.length != 2) {
                    System.out.println("Skipping line: " + details[0]);
                    continue;
                }
                // checks whether the first entry is a char, if not, line is skipped
                if (details[0].length() > 1) {
                    System.out.println("Skipping line: " + line);
                    continue;
                }

                char ch = details[0].charAt(0); // converts the first entry to char
                String code = details[1];

                // creates and instance of MorseCode with two parameters
                MorseCode morseCodeLine = new MorseCode(ch, code);

                // checks if the ch was out of range. if it was then it is skipped
                if (morseCodeLine.getCode() == null) {
                    continue;
                }

                // adds the morseCode instance to the arrayList
                listCode.add(morseCodeLine);
            }

            scanner.close();

        } catch (Exception e) {
            // this exception ends the program, a valid file is required to the program 
            throw new Exception("Invalid file name: " + fileName);
        }
    }

    /*
	 * This method simply prints the content of listCodes. 
     */
    public void printMorseCodeList() {
        for (MorseCode elem : listCode) {
            System.out.printf("('%c', %s)%n", elem.getCh(), elem.getCode());
        }
    }

    /*
	 * this method accepts a string parameter and prints the corresponding Morse
	 * code for that string.
     */
    public void convertString(String textToConvert) {

        // handles null and empty entries
        if (textToConvert == null) {
            System.out.println("");
        } else {

            int index;

            for (int i = 0; i < textToConvert.length(); ++i) {
                // converts char to int. Subtracted 33 to locate the index in the arrayList
                index = textToConvert.charAt(i) - 33;

                if (index == -1) // handles spaces " "
                {
                    System.out.print("");
                } else if (index < 58) // handles index 32 - 90 in ASCII char stored in the arrayList
                {
                    System.out.printf("%s ", listCode.get(index).getCode());
                } else if (index >= 64 && index <= 89) // handles lower-case a-z
                {
                    System.out.printf("%s ", listCode.get(index - 32).getCode());
                } else if (index > 57) // handles unknown char
                {
                    System.out.print("? ");
                }
            }
            System.out.println();
        }
    }

    /*
	 * This method accepts a file name as input and prints the corresponding Morse
	   code for the fileâ€™scontent. 
	 * Attempt to open the file, if it fails, an exception is thrown with 
	   Invalid file name: <<file name>>. 
	 * Read the content of the file and print the corresponding Morse code. 
	 * If an invalid character is encountered, print ? for its Morse code.
     */
    public void convertFile(String fileName) throws Exception {

        try {

            Scanner scanner = new Scanner(new File(fileName));

            // translates each line in the file to Morsse code
            while (scanner.hasNext()) {
                String line = scanner.nextLine();
                convertString(line);
            }

            scanner.close();

        } catch (Exception e) {
            throw new Exception("Invalid file name: " + fileName);
        }
    }
}
